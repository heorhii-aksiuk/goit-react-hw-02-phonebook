{"version":3,"sources":["components/Contacts/Contacts.js","components/Form/Form.js","components/Section/Section.js","App.js","index.js"],"names":["Contacts","contacts","this","props","map","contact","name","number","id","Component","Form","onChange","onSubmit","value","type","pattern","title","autoComplete","required","Section","children","App","state","handleChange","e","target","setState","handleSubmit","nanoid","preventDefault","reset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAGMA,E,4JAWJ,WACE,IAAQC,EAAaC,KAAKC,MAAlBF,SACR,OACE,6BACGA,EAASG,KAAI,SAAAC,GACZ,OACE,qBAAqBC,KAAMD,EAAQC,KAAnC,UACGD,EAAQC,KADX,MACoBD,EAAQE,SADnBF,EAAQG,a,GAjBNC,aA2BRT,IC3BTU,E,4JAOJ,WACE,MAA6CR,KAAKC,MAA1CG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAQI,EAAtB,EAAsBA,SAAUC,EAAhC,EAAgCA,SAChC,OACE,uBAAMA,SAAUA,EAAhB,UACE,uBACEC,MAAOP,EACPK,SAAUA,EACVG,KAAK,OACLR,KAAK,OACLS,QAAQ,yHACRC,MAAM,yIACNC,aAAa,MACbC,UAAQ,IAEV,uBACEL,MAAON,EACPI,SAAUA,EACVG,KAAK,MACLR,KAAK,SACLS,QAAQ,yFACRC,MAAM,+FACNE,UAAQ,IAEV,wBAAQJ,KAAK,SAAb,gC,GA9BWL,aAoCJC,ICpCTS,E,4JAMJ,WACE,MAA4BjB,KAAKC,MAAzBa,EAAR,EAAQA,MAAOI,EAAf,EAAeA,SACf,OACE,oCACE,6BAAKJ,IACJI,S,GAXaX,aAiBPU,ICdFE,EAAb,4MAEEC,MAAQ,CACNrB,SAAU,GACVK,KAAM,GACNC,OAAQ,IALZ,EAQEgB,aAAe,SAAAC,GACb,MAAwBA,EAAEC,OAAlBnB,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,EAAKa,SAAL,eAAiBpB,EAAOO,KAV5B,EAaEc,aAAe,SAAAH,GACb,MAAmC,EAAKF,MAAhCrB,EAAR,EAAQA,SAAUK,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,OAClBC,EAAKoB,cACXJ,EAAEK,iBACF,EAAKH,SAAS,CAAEzB,SAAS,GAAD,mBAAMA,GAAN,CAAgB,CAAEO,KAAIF,OAAMC,cACpD,EAAKuB,SAlBT,EAqBEA,MAAQ,WACN,EAAKJ,SAAS,CAAEpB,KAAM,GAAIC,OAAQ,MAtBtC,4CAyBE,WACE,MAAmCL,KAAKoB,MAAhChB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAQN,EAAtB,EAAsBA,SACtB,OACE,qCACE,cAAC,EAAD,CAASe,MAAM,YAAf,SACE,cAAC,EAAD,CACEV,KAAMA,EACNC,OAAQA,EACRI,SAAUT,KAAKqB,aACfX,SAAUV,KAAKyB,iBAGnB,cAAC,EAAD,CAASX,MAAM,WAAf,SACE,cAAC,EAAD,CAAUf,SAAUA,aAtC9B,GAAyBQ,aA6CVY,IC9CfU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bceaeea0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Contacts extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }),\n    ),\n  };\n\n  render() {\n    const { contacts } = this.props;\n    return (\n      <ul>\n        {contacts.map(contact => {\n          return (\n            <li key={contact.id} name={contact.name}>\n              {contact.name} : {contact.number}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default Contacts;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Form extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const { name, number, onChange, onSubmit } = this.props;\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          value={name}\n          onChange={onChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          autoComplete=\"off\"\n          required\n        />\n        <input\n          value={number}\n          onChange={onChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Section extends Component {\n  static propTypes = {\n    title: PropTypes.string,\n    contact: PropTypes.element,\n  };\n\n  render() {\n    const { title, children } = this.props;\n    return (\n      <section>\n        <h2>{title}</h2>\n        {children}\n      </section>\n    );\n  }\n}\n\nexport default Section;\n","import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport Contacts from './components/Contacts/Contacts';\nimport Form from './components/Form/Form';\nimport Section from './components/Section/Section';\n\nexport class App extends Component {\n  static propTypes = {};\n  state = {\n    contacts: [],\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    const { contacts, name, number } = this.state;\n    const id = nanoid();\n    e.preventDefault();\n    this.setState({ contacts: [...contacts, { id, name, number }] });\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number, contacts } = this.state;\n    return (\n      <>\n        <Section title=\"Phonebook\">\n          <Form\n            name={name}\n            number={number}\n            onChange={this.handleChange}\n            onSubmit={this.handleSubmit}\n          />\n        </Section>\n        <Section title=\"Contacts\">\n          <Contacts contacts={contacts} />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}